{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReceivingCallModal","props","Modal","size","aria-labelledby","centered","backdrop","keyboard","Header","closeButton","style","background","Title","id","Body","caller","Footer","Button","variant","onClick","onHide","acceptCall","Row","styled","div","App","peer","useRef","useState","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","callButtonDisability","setCallButtonDisability","remoteUserId","setRemoteUserId","userVideo","partnerVideo","socket","videoStatus","setVideoStatus","audioStatus","setAudioStatus","useEffect","current","io","connect","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","catch","reason","toast","error","on","console","log","data","from","name","signal","response","status","UserVideo","CallUserList","PartnerVideo","endCallButton","partnerName","ToggleMediaButtons","changeNameInput","Form","onSubmit","event","preventDefault","target","value","alreadyTaken","Object","keys","forEach","key","emit","Group","controlId","Label","Control","type","placeholder","className","playsInline","muted","ref","autoPlay","map","Peer","initiator","trickle","userToCall","signalData","alert","removeListener","destroy","message","disabled","margin","professorOnline","videobutton","audiobutton","videoIcon","audioIcon","oldTrack","getVideoTracks","readyState","newStream","newTrack","removeTrack","addTrack","replaceTrack","stop","getAudioTracks","Container","color","fluid","Col","fontWeight","show","to","autoClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe8d9ccc.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { Button, Col, Form, Container, Modal } from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { CameraVideo, CameraVideoOff, MicMute, Mic } from 'react-bootstrap-icons';\n\nfunction ReceivingCallModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton style={{background: \"grey\"}}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Receiving Call\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body style={{background: \"grey\"}}>\n        <div style={{background: \"grey\"}}>\n          <h4>{props.caller} is calling you.</h4>\n        </div>\n\n      </Modal.Body>\n      <Modal.Footer style={{background: \"grey\"}}>\n        <Button variant=\"danger\" onClick={props.onHide}>Reject</Button>\n        <Button variant=\"success\" onClick={props.acceptCall}>Accept</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\n// const UserVideoComponent = styled.video`\n//   border: 1px solid grey;\n//   width: 50%;\n//   height: 50%;\n//   transform: rotateY(180deg);\n//   -webkit-transform:rotateY(180deg); /* Safari and Chrome */\n//   -moz-transform:rotateY(180deg); /* Firefox */\n// `;\n// const PartenrVideoComponent = styled.video`\n//   border: 1px solid blue;\n//   width: 100%;\n//   height: 70%;\n//   transform: rotateY(180deg);\n//   -webkit-transform:rotateY(180deg); /* Safari and Chrome */\n//   -moz-transform:rotateY(180deg); /* Firefox */\n// `;\n\nfunction App() {\n  const peer = useRef(null)\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const [callButtonDisability, setCallButtonDisability] = useState(false);\n  const [remoteUserId, setRemoteUserId] = useState(\"\");\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  const [videoStatus, setVideoStatus] = useState(true);\n  const [audioStatus, setAudioStatus] = useState(true);\n\n  useEffect(() => {\n    // 1. connect to server\n    // socket.current = io.connect(\"http://192.168.29.67:8000/\");\n    // socket.current = io.connect(\"http://192.168.1.105:8000/\");\n    // socket.current = io.connect(\"https://ielts-video-chat.herokuapp.com/\");\n    socket.current = io.connect(\"\");\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    }).catch((reason) => {\n      toast.error(\"Provide Permission\")\n    })\n\n    socket.current.on(\"yourID\", (id) => {\n      setYourID(id);\n    })\n    socket.current.on(\"allUsers\", (users) => {\n      console.log(users);\n\n      setUsers(users);\n    })\n\n    socket.current.on(\"receiveCall\", (data) => {\n      console.log(\"Reciving\");\n      setReceivingCall(true);\n      // setCallButtonDisability(true);\n      setCaller(data.from.name);\n      setRemoteUserId(data.from.id);\n      setCallerSignal(data.signal);\n    })\n\n\n    socket.current.on(\"changeNameStatus\", (response) => {\n      if (response.status) {\n        // toast.success(\"Name changed!\");\n      } else {\n        toast.error(\"name already taken!\")\n      }\n    });\n  }, []);\n\n  function callPeer(id) {\n\n    // setCallButtonDisability(true);\n\n    peer.current = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream,\n    });\n\n    console.log(\"Call user\")\n    peer.current.on(\"signal\", data => {\n      socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID });\n    });\n\n    peer.current.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      setRemoteUserId(id);\n      peer.current.signal(signal);\n      setCallButtonDisability(true);\n      console.log(\"accepted\");\n    });\n\n\n    peer.current.on(\"error\", (error) => {\n      console.log(error);\n      if (error !== \"Call ended\") {\n        alert(\"Connection error or client closed webpage!\")\n      }\n      setRemoteUserId(\"\");\n      setCallAccepted(false);\n      setCallButtonDisability(false);\n\n      socket.current.removeListener(\"callAccepted\");\n      socket.current.removeListener(\"videoStatusChange\");\n      socket.current.removeListener(\"audioStatusChange\");\n    })\n\n\n    socket.current.on(\"callEnded\", () => {\n      peer.current.destroy(\"Call ended\");\n    })\n\n    socket.current.on(\"error\", (error) => {\n      peer.current.destroy(error.message);\n    })\n\n\n  }\n\n\n\n  function acceptCall() {\n    setCallAccepted(true);\n    setReceivingCall(false);\n    setCallButtonDisability(true);\n    // setCaller(false);\n\n    peer.current = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream,\n    });\n\n    peer.current.on(\"signal\", data => {\n      socket.current.emit(\"acceptCall\", { signal: data, to: remoteUserId });\n    });\n\n    peer.current.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.current.signal(callerSignal);\n\n\n    peer.current.on(\"error\", (error) => {\n      console.log(error);\n      if (error !== \"Call ended\") {\n        alert(\"Connection error or client closed webpage!\")\n      }\n      setCallAccepted(false);\n      setCaller(\"\");\n      setRemoteUserId(\"\");\n      setCallerSignal();\n      setCallButtonDisability(false);\n\n      socket.current.removeListener(\"videoStatusChange\");\n      socket.current.removeListener(\"audioStatusChange\");\n    });\n\n\n    socket.current.on(\"callEnded\", () => {\n      peer.current.destroy(\"Call ended\");\n    })\n\n\n  }\n\n  function toggleVideo() {\n\n    const oldTrack = stream.getVideoTracks()[0];\n\n    if (oldTrack.readyState === \"ended\") {\n\n      navigator.mediaDevices.getUserMedia({ video: true }).then(newStream => {\n        const newTrack = newStream.getVideoTracks()[0]\n        stream.removeTrack(oldTrack)\n        stream.addTrack(newTrack)\n        setVideoStatus(true);\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, newTrack, stream);\n        }\n      })\n    }\n    else if (oldTrack.readyState === \"live\") {\n\n      oldTrack.stop();\n      setVideoStatus(false);\n\n      if (callAccepted) {\n        peer.current.replaceTrack(oldTrack, oldTrack, stream);\n      }\n    }\n\n  }\n\n  function toggleAudio() {\n\n\n    const oldTrack = stream.getAudioTracks()[0];\n\n    if (oldTrack.readyState === \"ended\") {\n\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(newStream => {\n        const newTrack = newStream.getAudioTracks()[0]\n        stream.removeTrack(oldTrack)\n        stream.addTrack(newTrack)\n        setAudioStatus(true);\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, newTrack, stream);\n        }\n      })\n    }\n    else if (oldTrack.readyState === \"live\") {\n\n      oldTrack.stop();\n      setAudioStatus(false);\n\n      if (callAccepted) {\n        peer.current.replaceTrack(oldTrack, oldTrack, stream);\n      }\n    }\n\n  }\n\n\n\n  function endCall(key) {\n    socket.current.emit(\"endCall\", { id: remoteUserId })\n  }\n\n  function changeName(event) {\n    event.preventDefault();\n    const name = event.target.name.value;\n    let alreadyTaken = false;\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (name === users[key]) {\n          alreadyTaken = true;\n        }\n      }\n    })\n    if (alreadyTaken) {\n      toast.error(\"name already taken!\"); return;\n    } else {\n      socket.current.emit(\"changeName\", { name })\n    }\n\n  }\n\n  const changeNameInput = (\n    <Form onSubmit={changeName}>\n      <Row>\n        <Form.Group controlId=\"name\" >\n          <Form.Label>Change Display name</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Enter name\" />\n        </Form.Group>\n      </Row>\n      <Button variant=\"primary\" type=\"submit\">\n        Change Name\n      </Button>\n    </Form>\n  );\n\n\n  let UserVideo;\n  let CallUserList;\n  if (stream) {\n    UserVideo = (\n      <video className=\"userVideo\" playsInline muted ref={userVideo} autoPlay />\n    );\n    if (users[yourID] === \"professor\") {\n      CallUserList = Object.keys(users).map(key => {\n        if (key === yourID) {\n          return null;\n        }\n        return (\n          <Button variant=\"primary\" onClick={() => callPeer(key)} disabled={callButtonDisability} style={{ margin: 5 }} >Call {users[key]}</Button>\n        );\n      })\n    }\n  }\n\n  let PartnerVideo;\n  let endCallButton;\n  let partnerName;\n  let ToggleMediaButtons;\n\n  const videobutton = videoStatus ? \"outline-danger\" : \"danger\";\n  const audiobutton = audioStatus ? \"outline-danger\" : \"danger\";\n  const videoIcon = videoStatus ? <CameraVideo /> : <CameraVideoOff />;\n  const audioIcon = audioStatus ? <Mic /> : <MicMute />;\n\n  if (callAccepted) {\n    PartnerVideo = <video className=\"partnerVideo\" playsInline ref={partnerVideo} autoPlay />\n    partnerName = <h4>Partner: {users[remoteUserId]}</h4>\n    endCallButton = (\n      <Button variant=\"danger\" onClick={() => endCall()} >End Call</Button>\n    );\n\n  }\n  ToggleMediaButtons = (\n    <>\n      <Button variant={videobutton} onClick={toggleVideo} > {videoIcon} </Button>\n      <Button variant={audiobutton} onClick={toggleAudio}> {audioIcon} </Button>\n    </>\n  )\n\n\n  // let incomingCall;\n  // if (receivingCall && users[remoteUserId]) {\n  //   incomingCall = (\n  //     <div>\n  //       <h4>{caller} is calling you</h4>\n  //       <button onClick={acceptCall}>Accept</button>\n  //     </div>\n  //   )\n  // }\n\n  let professorOnline;\n  if (users[yourID] !== \"professor\") {\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (users[key] === \"professor\") {\n          professorOnline = \"Professor online\";\n        }\n      }\n    })\n  }\n\n\n  return (\n    <Container style={{ color: \"white\" }} fluid>\n      <Row>\n        {CallUserList}\n      </Row>\n      <Row>\n        {/* {incomingCall} */}\n        {endCallButton}\n      </Row>\n\n      <Row>\n\n        <Col>\n          {UserVideo}\n          <Row>{ToggleMediaButtons}</Row>\n          <h4>You: {users[yourID]}</h4>\n          {changeNameInput}\n        </Col>\n        <Col>\n          {PartnerVideo}\n          {partnerName}\n        </Col>\n\n      </Row>\n\n      <Row>\n        <h5 style={{ color: \"green\", fontWeight: \"bold\", margin: 5 }}>{professorOnline}</h5>\n      </Row>\n      <ReceivingCallModal\n        show={receivingCall}\n        caller={caller}\n        acceptCall={acceptCall}\n        onHide={() => { }}\n      />\n      <ToastContainer autoClose={2000} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["incommingCallAudio","Audio","loop","LoadingTailSpin","type","color","Row","styled","div","App","peer","useRef","useState","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","userMediaLoading","callingPermission","setCallingPermission","callButtonDisability","setCallButtonDisability","remoteUserId","setRemoteUserId","userVideo","partnerVideo","socket","videoStatus","audioStatus","cameraMode","handleNewICECandidateMsg","incoming","candidate","RTCIceCandidate","current","addIceCandidate","catch","e","console","log","callPeer","id","RTCPeerConnection","iceServers","urls","url","on","onicecandidate","emit","to","ontrack","srcObject","streams","onnegotiationneeded","createOffer","then","offer","setLocalDescription","userToCall","signalData","localDescription","from","getTracks","forEach","track","addTrack","signal","desc","RTCSessionDescription","setRemoteDescription","useEffect","io","connect","navigator","mediaDevices","getUserMedia","video","facingMode","audio","reason","toast","error","data","name","response","status","UserVideo","CallUserList","callFaculty","PartnerVideo","professorOnline","incommintCall","changeNameInput","Form","onSubmit","event","preventDefault","target","value","alreadyTaken","Object","keys","key","Group","controlId","Label","Control","placeholder","Button","variant","size","className","playsInline","muted","ref","autoPlay","map","onClick","disabled","style","margin","play","Card","background","Header","Body","Title","Container","Col","pause","currentTime","createAnswer","answer","Footer","ToggleMediaButtons","hidden","endCallButton","fluid","fontWeight","autoClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bd287d34.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport io from \"socket.io-client\";\n// import Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { Button, Col, Form, Container, Card } from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { CameraVideo, CameraVideoOff, MicMute, Mic, ArrowBarUp } from 'react-bootstrap-icons';\nimport Loader from 'react-loader-spinner'\n\nconst incommingCallAudio = new Audio('./skype_remix_2.mp3')\nincommingCallAudio.loop = true\n\n\nconst LoadingTailSpin = () => {\n  return (\n    <Loader\n      type=\"TailSpin\"\n      color=\"#00BFFF\"\n    // timeout={3000}\n    />\n  )\n}\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nfunction App() {\n  const peer = useRef(null)\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [userMediaLoading, setUserMediaLoading] = useState(false);\n\n  const [callingPermission, setCallingPermission] = useState(false);\n\n  const [callButtonDisability, setCallButtonDisability] = useState(false);\n  const [remoteUserId, setRemoteUserId] = useState(\"\");\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  const [videoStatus, setVideoStatus] = useState(true);\n  const [audioStatus, setAudioStatus] = useState(true);\n  const [screenShareStatus, setScreenShareStatus] = useState(false);\n  const [cameraMode, setCameraMode] = useState('user')\n\n  useEffect(() => {\n    // 1. connect to server\n    // socket.current = io.connect(\"http://localhost:8001/\");\n    // socket.current = io.connect(\"http://192.168.29.67:8000/\");\n    // socket.current = io.connect(\"http://192.168.1.105:8000/\");\n    // socket.current = io.connect(\"https://ielts-video-chat.herokuapp.com/\");\n    socket.current = io.connect(\"\");\n    navigator.mediaDevices.getUserMedia({ video: { facingMode: cameraMode }, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    }).catch((reason) => {\n      toast.error(\"Provide Permission\")\n    })\n\n    socket.current.on(\"yourID\", (id) => {\n      setYourID(id);\n    })\n    socket.current.on(\"allUsers\", (users) => {\n      console.log(users);\n\n      setUsers(users);\n    })\n\n    socket.current.on(\"receiveSignal\", (data) => {\n      console.log(\"Reciving signal\");\n      setCallerSignal(data.signal);\n    })\n\n    socket.current.on(\"receiveCall\", (data) => {\n      console.log(\"Reciving\");\n      setReceivingCall(true);\n      setCallButtonDisability(true);\n      setCaller(data.from.name);\n      setRemoteUserId(data.from.id);\n      // setCallerSignal(data.signal);\n    })\n\n    socket.current.on(\"changeNameStatus\", (response) => {\n      if (response.status) {\n        // toast.success(\"Name changed!\");\n      } else {\n        toast.error(\"name already taken!\")\n      }\n    });\n\n\n  }, []);\n\n  useEffect(() => {\n    socket.current.on(\"callPermissionGranted\", (data) => {\n      if (users[data.from]) {\n        console.log(\"Permission Granted from \" + users[data.from]);\n        setCallingPermission(data.from);\n      }\n    })\n  }, [users])\n\n  function handleNewICECandidateMsg(incoming) {\n    const candidate = new RTCIceCandidate(incoming);\n    peer.current.addIceCandidate(candidate)\n      .catch(e => console.log(e));\n  }\n\n  function callPeer(id) {\n\n    setCallButtonDisability(true);\n\n    peer.current = new RTCPeerConnection({ \n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' },{url:'stun:stun1.l.google.com:19302'}, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] \n    });\n\n    console.log(peer.current);\n\n    socket.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n\n    peer.current.onicecandidate = function handleICECandidateEvent(e) {\n      if (e.candidate) {\n        socket.current.emit(\"ice-candidate\", { to: id, candidate: e.candidate, });\n      }\n    };\n\n    peer.current.ontrack = (e) => {\n      partnerVideo.current.srcObject = e.streams[0];\n    };\n    peer.current.onnegotiationneeded = () => {\n      peer.current.createOffer().then(offer => {\n        return peer.current.setLocalDescription(offer);\n      }).then(() => {\n        socket.current.emit(\"callerSignal\", { userToCall: id, signalData: peer.current.localDescription, from: yourID });\n      }).catch(e => console.log(e));\n    }\n    socket.current.emit(\"callUser\", { userToCall: id, from: yourID });\n\n    stream.getTracks().forEach(track => peer.current.addTrack(track, stream));\n\n    // console.log(\"Call user\");\n    // peer.current.on(\"signal\", data => {\n    //   socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID });\n    // });\n    // // socket.current.emit(\"callUser\", { userToCall: id, from: yourID });\n\n    // peer.current.on(\"stream\", stream => {\n    //   if (partnerVideo.current) {\n    //     partnerVideo.current.srcObject = stream;\n    //   }\n    // });\n\n    // peer.current.on('connect', () => {\n    //   toast.info(\"Connected\")\n    // })\n\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      setRemoteUserId(id);\n      const desc = new RTCSessionDescription(signal);\n      peer.current.setRemoteDescription(desc).catch(e => console.log(e));\n      setCallButtonDisability(true);\n      console.log(\"accepted\");\n      setCallingPermission(false);\n    });\n\n\n    // peer.current.on(\"error\", (error) => {\n    //   console.log(error);\n    //   if (error !== \"Call ended\") {\n    //     alert(\"Connection error or client closed webpage!\")\n    //   }\n    //   setRemoteUserId(\"\");\n    //   setCallAccepted(false);\n    //   setCallButtonDisability(false);\n\n    //   socket.current.removeListener(\"callAccepted\");\n    //   socket.current.removeListener(\"videoStatusChange\");\n    //   socket.current.removeListener(\"audioStatusChange\");\n    // })\n\n\n    // socket.current.on(\"callEnded\", () => {\n    //   // peer.current.destroy(\"Call ended\");\n    //   setRemoteUserId(\"\");\n    //   setCallAccepted(false);\n    //   setCallButtonDisability(false);\n\n    //   socket.current.removeListener(\"callAccepted\");\n    //   socket.current.removeListener(\"videoStatusChange\");\n    //   socket.current.removeListener(\"audioStatusChange\");\n    // })\n\n    // socket.current.on(\"error\", (error) => {\n    //   peer.current.destroy(error.message);\n    // })\n\n  }\n\n\n  function acceptCall() {\n    incommingCallAudio.pause()\n    incommingCallAudio.currentTime = 0;\n    setCallAccepted(true);\n    setReceivingCall(false);\n    setCallButtonDisability(true);\n    // setCaller(false);\n\n    peer.current = new RTCPeerConnection({ \n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' },{url:'stun:stun1.l.google.com:19302'}, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] \n    });\n\n    socket.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n\n    peer.current.onicecandidate = (e) => {\n      if (e.candidate) {\n        socket.current.emit(\"ice-candidate\", { to: remoteUserId, candidate: e.candidate, });\n      }\n    };\n\n    peer.current.ontrack = (e) => {\n      partnerVideo.current.srcObject = e.streams[0];\n    };\n    peer.current.onnegotiationneeded = () => {\n      peer.current.createOffer().then(offer => {\n        return peer.current.setLocalDescription(offer);\n      }).then(() => {\n        // socket.current.emit(\"callUser\", { userToCall: id, signalData: peer.current.localDescription, from: yourID });\n      }).catch(e => console.log(e));\n    }\n\n    const desc = new RTCSessionDescription(callerSignal);\n    peer.current.setRemoteDescription(desc).then(() => {\n      stream.getTracks().forEach(track => peer.current.addTrack(track, stream));\n    }).then(() => {\n      return peer.current.createAnswer();\n    }).then(answer => {\n      return peer.current.setLocalDescription(answer);\n    }).then(() => {\n      // const payload = {\n      //   target: incoming.caller,\n      //   caller: socketRef.current.id,\n      //   sdp: peer.current.localDescription\n      // }\n      socket.current.emit(\"acceptCall\", { signal: peer.current.localDescription, to: remoteUserId });\n    })\n\n    // peer.current = new Peer({\n    //   initiator: false,\n    //   trickle: false,\n    //   stream: stream,\n    //   // reconnectTimer: true,\n    //   //  config: { iceServers: [{ urls: 'stun:stun.l.google.com:19302' },{url:'stun:stun1.l.google.com:19302'}, { urls: 'stun:global.stun.twilio.com:3478?transport=udp' }] },\n    // });\n\n    // peer.current.on(\"signal\", data => {\n    //   toast.info(\"call accept signal\");\n    //   socket.current.emit(\"acceptCall\", { signal: data, to: remoteUserId });\n    // });\n\n    // peer.current.on(\"stream\", stream => {\n    //   partnerVideo.current.srcObject = stream;\n    // });\n\n    // peer.current.signal(callerSignal);\n\n    // peer.current.on('connect', () => {\n    //   toast.info(\"Connected\")\n    // })\n\n    // peer.current.on(\"error\", (error) => {\n    //   console.log(error);\n    //   setCallAccepted(false);\n    //   setCaller(\"\");\n    //   setRemoteUserId(\"\");\n    //   setCallerSignal();\n    //   setCallButtonDisability(false);\n\n    //   socket.current.removeListener(\"videoStatusChange\");\n    //   socket.current.removeListener(\"audioStatusChange\");\n    //   if (error !== \"Call ended\") {\n    //     alert(\"Connection error or client closed webpage!\")\n    //   }\n    // });\n\n\n    // socket.current.on(\"callEnded\", () => {\n    //   // peer.current.destroy(\"Call ended\");\n    //   setCallAccepted(false);\n    //   setCaller(\"\");\n    //   setRemoteUserId(\"\");\n    //   setCallerSignal();\n    //   setCallButtonDisability(false);\n\n    //   socket.current.removeListener(\"videoStatusChange\");\n    //   socket.current.removeListener(\"audioStatusChange\");\n    // })\n\n\n  }\n\n  function endCall(key) {\n    socket.current.emit(\"endCall\", { id: remoteUserId })\n    peer.current.destroy(\"Call ended\");\n  }\n\n  function giveCallPermission(id) {\n    socket.current.emit(\"giveCallPermission\", { from: yourID, to: id });\n  }\n\n  function toggleVideo() {\n    startUserMediaLoadingTimeout(1000);\n\n    if (screenShareStatus) {\n      toggleScreenShare();\n    }\n\n    setTimeout(() => {\n      const oldTrack = stream.getVideoTracks()[0];\n\n      if (oldTrack.readyState === \"ended\") {\n\n        navigator.mediaDevices.getUserMedia({ video: { facingMode: cameraMode } }).then(newStream => {\n          const newTrack = newStream.getVideoTracks()[0]\n          stream.removeTrack(oldTrack)\n          stream.addTrack(newTrack)\n          setVideoStatus(true);\n          if (callAccepted) {\n            peer.current.replaceTrack(oldTrack, newTrack, stream);\n          }\n        })\n      }\n      else if (oldTrack.readyState === \"live\") {\n\n        oldTrack.stop();\n        setVideoStatus(false);\n\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, oldTrack, stream);\n        }\n      }\n    }, 500);\n\n  }\n\n  function toggleScreenShare() {\n    startUserMediaLoadingTimeout(1000);\n\n    if (videoStatus) {\n      toggleVideo();\n    }\n\n    setTimeout(() => {\n\n      const oldScreenTrack = stream.getVideoTracks()[0];\n\n      if (oldScreenTrack.readyState === \"ended\") {\n\n        navigator.mediaDevices.getDisplayMedia({ video: true, audio: true }).then(newStream => {\n          const newTrack = newStream.getVideoTracks()[0]\n          stream.removeTrack(oldScreenTrack)\n          stream.addTrack(newTrack)\n          setScreenShareStatus(true);\n          if (callAccepted) {\n            peer.current.replaceTrack(oldScreenTrack, newTrack, stream);\n          }\n          stream.getVideoTracks()[0].addEventListener('ended', () => {\n            setScreenShareStatus(false)\n          });\n        })\n      }\n      else if (oldScreenTrack.readyState === \"live\") {\n\n        oldScreenTrack.stop();\n        setScreenShareStatus(false);\n\n        if (callAccepted) {\n          peer.current.replaceTrack(oldScreenTrack, oldScreenTrack, stream);\n        }\n      }\n\n\n    }, 500);\n\n  }\n\n  function toggleAudio() {\n    startUserMediaLoadingTimeout(400);\n\n    const oldTrack = stream.getAudioTracks()[0];\n\n    if (oldTrack.readyState === \"ended\") {\n\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(newStream => {\n        const newTrack = newStream.getAudioTracks()[0]\n        stream.removeTrack(oldTrack)\n        stream.addTrack(newTrack)\n        setAudioStatus(true);\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, newTrack, stream);\n        }\n      })\n    }\n    else if (oldTrack.readyState === \"live\") {\n\n      oldTrack.stop();\n      setAudioStatus(false);\n\n      if (callAccepted) {\n        peer.current.replaceTrack(oldTrack, oldTrack, stream);\n      }\n    }\n\n  }\n\n  // function toggleCamera() {\n  //   startUserMediaLoadingTimeout(1700);\n  //   const newCameraMode = cameraMode === 'user' ? 'environment' : 'user';\n  //   const oldTrack = stream.getVideoTracks()[0];\n  //   oldTrack.stop()\n  //   navigator.mediaDevices.getUserMedia({ video: { facingMode: cameraMode } }).then(newStream => {\n  //     const newTrack = newStream.getVideoTracks()[0]\n  //     stream.removeTrack(oldTrack)\n  //     stream.addTrack(newTrack)\n  //     setVideoStatus(true);\n  //     if (callAccepted) {\n  //       peer.current.replaceTrack(oldTrack, newTrack, stream);\n  //     }\n  //   })\n  //   setCameraMode(newCameraMode)\n  // }\n\n  const startUserMediaLoadingTimeout = (milisec) => {\n    setUserMediaLoading(true);\n    setTimeout(() => {\n      setUserMediaLoading(false);\n    }, milisec);\n  }\n\n\n  function changeName(event) {\n    event.preventDefault();\n    const name = event.target.name.value;\n    let alreadyTaken = false;\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (name === users[key]) {\n          alreadyTaken = true;\n        }\n      }\n    })\n    if (alreadyTaken) {\n      toast.error(\"name already taken!\"); return;\n    } else {\n      socket.current.emit(\"changeName\", { name })\n    }\n\n  }\n\n  const changeNameInput = (\n    <Form onSubmit={changeName}>\n      <Form.Group controlId=\"name\" >\n        <Form.Label>Change Display name</Form.Label>\n\n        <Form.Control type=\"text\" placeholder=\"Enter name\" />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\" size=\"sm\">\n        <small>Change Name</small>\n      </Button>\n\n    </Form>\n  );\n\n\n  let UserVideo;\n  let CallUserList;\n  let callFaculty;\n  if (stream) {\n    UserVideo = (\n      <video className=\"userVideo\" playsInline muted ref={userVideo} autoPlay />\n    );\n    if (users[yourID] === \"professor\") {\n      CallUserList = Object.keys(users).map(key => {\n        if (key === yourID) {\n          return null;\n        }\n        return (\n          <>\n            <Button variant=\"primary\" onClick={() => callPeer(key)} disabled={callButtonDisability} style={{ margin: 5 }} >Call {users[key]}</Button>\n            <Button variant=\"success\" onClick={() => giveCallPermission(key)} disabled={callButtonDisability} style={{ margin: 5 }} >give Permission to {users[key]}</Button>\n          </>\n        );\n      })\n    } else if (callingPermission) {\n      callFaculty = (\n        <Button variant=\"primary\" onClick={() => callPeer(callingPermission)} disabled={callButtonDisability} style={{ margin: 5 }} >Call {users[callingPermission]}</Button>\n      )\n    }\n  }\n\n\n  let PartnerVideo;\n  let endCallButton;\n\n  if (callAccepted) {\n    PartnerVideo = <video className=\"partnerVideo\" playsInline ref={partnerVideo} autoPlay />\n    // endCallButton = (\n    //   <div className=\"endCallButton\">\n    //     <Button variant=\"danger\" onClick={() => endCall()} >End Call</Button>\n    //   </div>\n    // );\n\n  }\n\n  let ToggleMediaButtons;\n  const videobutton = videoStatus ? \"success\" : \"danger\";\n  const audiobutton = audioStatus ? \"success\" : \"danger\";\n  const screenSharebutton = screenShareStatus ? \"success\" : \"danger\";\n  const videoIcon = videoStatus ? <CameraVideo size={20} /> : <CameraVideoOff size={20} />;\n  const audioIcon = audioStatus ? <Mic size={20} /> : <MicMute size={20} />;\n  const screenShareIcon = <ArrowBarUp size={20} />\n  const mediaButtonDisable = !callAccepted;\n  // ToggleMediaButtons = (\n  //   <Row className=\"justify-content-md-center\">\n  //     <Button variant={videobutton} onClick={toggleVideo} style={{ margin: 5 }} disabled={mediaButtonDisable}> {videoIcon} </Button>\n  //     <Button variant={audiobutton} onClick={toggleAudio} style={{ margin: 5 }} disabled={mediaButtonDisable}> {audioIcon} </Button>\n  //     <Button variant={screenSharebutton} onClick={toggleScreenShare} style={{ margin: 5 }} disabled={mediaButtonDisable}> {screenShareIcon} </Button>\n  //     {/* {videoStatus &&\n  //       <Button onClick={toggleCamera} style={{ margin: 5 }} disabled={mediaButtonDisable}> <ArrowRepeat /> </Button>\n  //     } */}\n  //   </Row>\n  // )\n\n\n  let professorOnline;\n  if (users[yourID] !== \"professor\") {\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (users[key] === \"professor\") {\n          professorOnline = \"Professor online\";\n        }\n      }\n    })\n  }\n\n  let incommintCall;\n  if (receivingCall && users[remoteUserId] && callerSignal) {\n    incommingCallAudio.play()\n\n    incommintCall = (\n      <div className=\"incommingCall\">\n\n        <Card className=\"text-center\" style={{ background: \"black\", color: \"white\" }}>\n          <Card.Header><h2>{caller} is calling you</h2></Card.Header>\n          <Card.Body>\n            <Card.Title></Card.Title>\n            <Container>\n              <Row>\n                <Col><Button size=\"lg\" variant=\"danger\" onClick={() => { }}>Reject</Button></Col>\n                <Col><Button size=\"lg\" variant=\"success\" onClick={acceptCall}>Accept</Button></Col>\n              </Row>\n            </Container>\n          </Card.Body>\n          <Card.Footer className=\"text-muted\"></Card.Footer>\n        </Card>\n\n      </div>\n    )\n  } else {\n    incommingCallAudio.pause()\n    incommingCallAudio.currentTime = 0;\n  }\n\n\n  return (\n    <>\n      {/* ABSOLUTE POSITIONED components  */}\n      {incommintCall}\n      {PartnerVideo}\n      <div className=\"userElements\">\n        {UserVideo}\n        {ToggleMediaButtons}\n      </div>\n      <div className=\"userElementsLoadingBox\" hidden={!userMediaLoading}>\n        <div className=\"userElementsLoading\">\n          <LoadingTailSpin />\n        </div>\n      </div>\n\n      {endCallButton}\n\n      {/* DEFAULT POSITIONED components  */}\n      <Container style={{ color: \"white\" }} fluid>\n        <Row>\n          {CallUserList} {callFaculty}\n        </Row>\n        <Row>\n          <Col>\n            <h4>You: {users[yourID]}</h4>\n            {changeNameInput}\n            <Row style={{ color: \"green\", fontWeight: \"bold\" }}>\n              {professorOnline}\n            </Row>\n          </Col>\n\n        </Row>\n        <ToastContainer autoClose={2000} />\n      </Container>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["incommingCallAudio","Audio","loop","Row","styled","div","App","peer","useRef","useState","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","callButtonDisability","setCallButtonDisability","remoteUserId","setRemoteUserId","userVideo","partnerVideo","socket","videoStatus","setVideoStatus","audioStatus","setAudioStatus","useEffect","current","io","connect","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","catch","reason","toast","error","on","id","console","log","data","from","name","signal","response","status","UserVideo","CallUserList","PartnerVideo","endCallButton","partnerName","ToggleMediaButtons","changeNameInput","Form","onSubmit","event","preventDefault","target","value","alreadyTaken","Object","keys","forEach","key","emit","Group","controlId","Label","Control","type","placeholder","Button","variant","className","playsInline","muted","ref","autoPlay","map","onClick","Peer","initiator","trickle","userToCall","signalData","alert","removeListener","destroy","message","disabled","style","margin","professorOnline","incommintCall","videobutton","audiobutton","videoIcon","size","audioIcon","oldTrack","getVideoTracks","readyState","newStream","newTrack","removeTrack","addTrack","replaceTrack","stop","getAudioTracks","play","Card","background","color","Header","Body","Title","Container","Col","pause","currentTime","to","Footer","fluid","fontWeight","autoClose","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89aa881d.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nimport { Button, Col, Form, Container, Modal, Card } from 'react-bootstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { CameraVideo, CameraVideoOff, MicMute, Mic } from 'react-bootstrap-icons';\nconst incommingCallAudio = new Audio('./skype_remix_2.mp3')\nincommingCallAudio.loop = true\n\nfunction ReceivingCallModal(props) {\n\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton style={{ background: \"grey\" }}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Receiving Call\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body style={{ background: \"grey\" }}>\n        <div style={{ background: \"grey\" }}>\n          <h4>{props.caller} is calling you.</h4>\n        </div>\n\n      </Modal.Body>\n      <Modal.Footer style={{ background: \"grey\" }}>\n        <Button variant=\"danger\" onClick={props.onHide}>Reject</Button>\n        <Button variant=\"success\" onClick={props.acceptCall}>Accept</Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nfunction App() {\n  const peer = useRef(null)\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const [callButtonDisability, setCallButtonDisability] = useState(false);\n  const [remoteUserId, setRemoteUserId] = useState(\"\");\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  const [videoStatus, setVideoStatus] = useState(true);\n  const [audioStatus, setAudioStatus] = useState(true);\n\n  useEffect(() => {\n    // 1. connect to server\n    // socket.current = io.connect(\"http://192.168.29.67:8000/\");\n    // socket.current = io.connect(\"http://192.168.1.105:8000/\");\n    // socket.current = io.connect(\"https://ielts-video-chat.herokuapp.com/\");\n    socket.current = io.connect(\"\");\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    }).catch((reason) => {\n      toast.error(\"Provide Permission\")\n    })\n\n    socket.current.on(\"yourID\", (id) => {\n      setYourID(id);\n    })\n    socket.current.on(\"allUsers\", (users) => {\n      console.log(users);\n\n      setUsers(users);\n    })\n\n    socket.current.on(\"receiveCall\", (data) => {\n      console.log(\"Reciving\");\n      setReceivingCall(true);\n      // setCallButtonDisability(true);\n      setCaller(data.from.name);\n      setRemoteUserId(data.from.id);\n      setCallerSignal(data.signal);\n    })\n\n\n    socket.current.on(\"changeNameStatus\", (response) => {\n      if (response.status) {\n        // toast.success(\"Name changed!\");\n      } else {\n        toast.error(\"name already taken!\")\n      }\n    });\n  }, []);\n\n  function callPeer(id) {\n\n    // setCallButtonDisability(true);\n\n    peer.current = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream,\n    });\n\n    console.log(\"Call user\")\n    peer.current.on(\"signal\", data => {\n      socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID });\n    });\n\n    peer.current.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      setRemoteUserId(id);\n      peer.current.signal(signal);\n      setCallButtonDisability(true);\n      console.log(\"accepted\");\n    });\n\n\n    peer.current.on(\"error\", (error) => {\n      console.log(error);\n      if (error !== \"Call ended\") {\n        alert(\"Connection error or client closed webpage!\")\n      }\n      setRemoteUserId(\"\");\n      setCallAccepted(false);\n      setCallButtonDisability(false);\n\n      socket.current.removeListener(\"callAccepted\");\n      socket.current.removeListener(\"videoStatusChange\");\n      socket.current.removeListener(\"audioStatusChange\");\n    })\n\n\n    socket.current.on(\"callEnded\", () => {\n      peer.current.destroy(\"Call ended\");\n    })\n\n    socket.current.on(\"error\", (error) => {\n      peer.current.destroy(error.message);\n    })\n\n\n  }\n\n\n\n  function acceptCall() {\n    incommingCallAudio.pause()\n    incommingCallAudio.currentTime = 0;\n    setCallAccepted(true);\n    setReceivingCall(false);\n    setCallButtonDisability(true);\n    // setCaller(false);\n\n    peer.current = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream,\n    });\n\n    peer.current.on(\"signal\", data => {\n      socket.current.emit(\"acceptCall\", { signal: data, to: remoteUserId });\n    });\n\n    peer.current.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.current.signal(callerSignal);\n\n\n    peer.current.on(\"error\", (error) => {\n      console.log(error);\n      if (error !== \"Call ended\") {\n        alert(\"Connection error or client closed webpage!\")\n      }\n      setCallAccepted(false);\n      setCaller(\"\");\n      setRemoteUserId(\"\");\n      setCallerSignal();\n      setCallButtonDisability(false);\n\n      socket.current.removeListener(\"videoStatusChange\");\n      socket.current.removeListener(\"audioStatusChange\");\n    });\n\n\n    socket.current.on(\"callEnded\", () => {\n      peer.current.destroy(\"Call ended\");\n    })\n\n\n  }\n\n  function toggleVideo() {\n\n    const oldTrack = stream.getVideoTracks()[0];\n\n    if (oldTrack.readyState === \"ended\") {\n\n      navigator.mediaDevices.getUserMedia({ video: true }).then(newStream => {\n        const newTrack = newStream.getVideoTracks()[0]\n        stream.removeTrack(oldTrack)\n        stream.addTrack(newTrack)\n        setVideoStatus(true);\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, newTrack, stream);\n        }\n      })\n    }\n    else if (oldTrack.readyState === \"live\") {\n\n      oldTrack.stop();\n      setVideoStatus(false);\n\n      if (callAccepted) {\n        peer.current.replaceTrack(oldTrack, oldTrack, stream);\n      }\n    }\n\n  }\n\n  function toggleAudio() {\n\n\n    const oldTrack = stream.getAudioTracks()[0];\n\n    if (oldTrack.readyState === \"ended\") {\n\n      navigator.mediaDevices.getUserMedia({ audio: true }).then(newStream => {\n        const newTrack = newStream.getAudioTracks()[0]\n        stream.removeTrack(oldTrack)\n        stream.addTrack(newTrack)\n        setAudioStatus(true);\n        if (callAccepted) {\n          peer.current.replaceTrack(oldTrack, newTrack, stream);\n        }\n      })\n    }\n    else if (oldTrack.readyState === \"live\") {\n\n      oldTrack.stop();\n      setAudioStatus(false);\n\n      if (callAccepted) {\n        peer.current.replaceTrack(oldTrack, oldTrack, stream);\n      }\n    }\n\n  }\n\n\n\n  function endCall(key) {\n    socket.current.emit(\"endCall\", { id: remoteUserId })\n  }\n\n  function changeName(event) {\n    event.preventDefault();\n    const name = event.target.name.value;\n    let alreadyTaken = false;\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (name === users[key]) {\n          alreadyTaken = true;\n        }\n      }\n    })\n    if (alreadyTaken) {\n      toast.error(\"name already taken!\"); return;\n    } else {\n      socket.current.emit(\"changeName\", { name })\n    }\n\n  }\n\n  const changeNameInput = (\n    <Form onSubmit={changeName}>\n      <Row>\n        <Form.Group controlId=\"name\" >\n          <Form.Label>Change Display name</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Enter name\" />\n        </Form.Group>\n      </Row>\n      <Button variant=\"primary\" type=\"submit\">\n        Change Name\n      </Button>\n    </Form>\n  );\n\n\n  let UserVideo;\n  let CallUserList;\n  if (stream) {\n    UserVideo = (\n      <video className=\"userVideo\" playsInline muted ref={userVideo} autoPlay />\n    );\n    if (users[yourID] === \"professor\") {\n      CallUserList = Object.keys(users).map(key => {\n        if (key === yourID) {\n          return null;\n        }\n        return (\n          <Button variant=\"primary\" onClick={() => callPeer(key)} disabled={callButtonDisability} style={{ margin: 5 }} >Call {users[key]}</Button>\n        );\n      })\n    }\n  }\n\n  let PartnerVideo;\n  let endCallButton;\n  let partnerName;\n  let ToggleMediaButtons;\n\n  if (callAccepted) {\n    PartnerVideo = <video className=\"partnerVideo\" playsInline ref={partnerVideo} autoPlay />\n    partnerName = <h4>Partner: {users[remoteUserId]}</h4>\n    endCallButton = (\n      <Button variant=\"danger\" onClick={() => endCall()} >End Call</Button>\n    );\n\n  }\n\n  const videobutton = videoStatus ? \"success\" : \"danger\";\n  const audiobutton = audioStatus ? \"success\" : \"danger\";\n  const videoIcon = videoStatus ? <CameraVideo size={50} /> : <CameraVideoOff size={50} />;\n  const audioIcon = audioStatus ? <Mic size={50} /> : <MicMute size={50} />;\n  ToggleMediaButtons = (\n    <>\n      <Button variant={videobutton} onClick={toggleVideo} style={{ margin: 5 }}> {videoIcon} </Button>\n      <Button variant={audiobutton} onClick={toggleAudio} style={{ margin: 5 }}> {audioIcon} </Button>\n    </>\n  )\n\n\n  let professorOnline;\n  if (users[yourID] !== \"professor\") {\n    Object.keys(users).forEach(key => {\n      if (key !== yourID) {\n        if (users[key] === \"professor\") {\n          professorOnline = \"Professor online\";\n        }\n      }\n    })\n  }\n\n  let incommintCall;\n  if ((receivingCall && users[remoteUserId])) {\n    incommingCallAudio.play()\n\n    incommintCall = (\n      <div className=\"incommingCall\">\n\n        <Card className=\"text-center\" style={{ background: \"black\", color: \"white\" }}>\n          <Card.Header><h2>{caller} is calling you</h2></Card.Header>\n          <Card.Body>\n            <Card.Title></Card.Title>\n            <Container>\n              <Row>\n                <Col><Button size=\"lg\" variant=\"danger\" onClick={() => { }}>Reject</Button></Col>\n                <Col><Button size=\"lg\" variant=\"success\" onClick={acceptCall}>Accept</Button></Col>\n              </Row>\n            </Container>\n          </Card.Body>\n          <Card.Footer className=\"text-muted\"></Card.Footer>\n        </Card>\n\n      </div>\n    )\n  } else {\n    incommingCallAudio.pause()\n    incommingCallAudio.currentTime = 0;\n  }\n\n\n  return (\n    <>\n      {incommintCall}\n      <Container style={{ color: \"white\" }} fluid>\n        <Row>\n          {CallUserList}\n        </Row>\n        <Row>\n          {endCallButton}\n        </Row>\n\n        <Row>\n\n          <Col>\n            {UserVideo}\n            <Row>{ToggleMediaButtons}</Row>\n            <h4>You: {users[yourID]}</h4>\n            {changeNameInput}\n            <Row style={{ color: \"green\", fontWeight: \"bold\" }}>\n              {professorOnline}\n            </Row>\n          </Col>\n          <Col>\n            {PartnerVideo}\n            {partnerName}\n          </Col>\n\n        </Row>\n        <ToastContainer autoClose={2000} />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}